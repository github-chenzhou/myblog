{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/material-flow/source/style.less","path":"style.less","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/icomoon.eot","path":"fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/icomoon.ttf","path":"fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/icomoon.svg","path":"fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/icomoon.woff","path":"fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/jquery.fitvids.js","path":"js/jquery.fitvids.js","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/material-flow/source/fonts/selection.json","path":"fonts/selection.json","modified":0,"renderable":1},{"_id":"themes/material-flow/source/js/search.js","path":"js/search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"5afd3db85777391820419cee04335671fc033eed","modified":1486461631000},{"_id":"themes/material-flow/LICENSE","hash":"44409ab0bcd7853e2ac93faad84e57299711e6bf","modified":1486453457000},{"_id":"themes/material-flow/_config.yml","hash":"697ddbb23dc3933d0872db06fa18da8d0ea9c00a","modified":1486454224000},{"_id":"themes/material-flow/README.md","hash":"edb4cef0f90200c29f64cd5a1d46b6373dfcd5c2","modified":1486453457000},{"_id":"source/_data/links.yml","hash":"23a4a01ddc5356eb2c0ccdc308d6f74ca8ca899e","modified":1486456640000},{"_id":"source/_data/menu.yml","hash":"ae54bd002dc4becdd9aeb6080fb59bcfd9a55407","modified":1486454137000},{"_id":"source/_data/widgets.yml","hash":"c60b9b6f0df6b283dc40c400f27b171e4dd0d2e0","modified":1486454175000},{"_id":"source/_posts/javascript-patterns2.md","hash":"1ee69ed228fe3e3d4b1d73d09f247d226b2065a5","modified":1486460758000},{"_id":"source/_posts/javascript-patterns1.md","hash":"47fe414f1ccd49bcea59c1bc7f5b18de0012d97d","modified":1486461186000},{"_id":"source/_posts/javascript-patterns3.md","hash":"f725767e45cc450963509bf939c724d4d35b44c8","modified":1486460772000},{"_id":"source/images/favicon.png","hash":"c9ea65622c47e91e760f0cad0628065bed3e1170","modified":1480647837000},{"_id":"source/about/index.md","hash":"f5d385d69cac3ddde93deb2d3b7b2a1324f88c43","modified":1486461273000},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1486455864000},{"_id":"themes/material-flow/.git/config","hash":"82381cee1ab01284f0764b866b459e10a56a791b","modified":1486453457000},{"_id":"themes/material-flow/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1486453452000},{"_id":"themes/material-flow/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1486453457000},{"_id":"source/images/avatar.jpg","hash":"ea9970d9caf3fc821ac9752ca9f18c5a8807748b","modified":1485070977000},{"_id":"themes/material-flow/.git/packed-refs","hash":"4f071a041cf32c3fc778e071f504e7c6926bf3a9","modified":1486453457000},{"_id":"themes/material-flow/.git/index","hash":"4fb1c5bb2031c9e2a950ccf11749437ba2112c6b","modified":1486453819000},{"_id":"themes/material-flow/layout/category.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1486453457000},{"_id":"themes/material-flow/layout/layout.ejs","hash":"9c285ea320f9a9cf6131d73a6756cbf3bd07e0c7","modified":1486453457000},{"_id":"themes/material-flow/layout/index.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1486453457000},{"_id":"themes/material-flow/layout/archive.ejs","hash":"139eb39002fb28c7c343a7d9a12b176784480e1f","modified":1486453457000},{"_id":"themes/material-flow/layout/tag.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1486453457000},{"_id":"themes/material-flow/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1486453457000},{"_id":"themes/material-flow/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1486453457000},{"_id":"themes/material-flow/snapshots/phone.png","hash":"479187e3103d1caa95cedd75fc23604dc073488e","modified":1486453457000},{"_id":"themes/material-flow/source/style.less","hash":"bd89478fbe8456b36e6535f8aceac7532cd7030c","modified":1486453457000},{"_id":"themes/material-flow/.git/logs/HEAD","hash":"963f302f2602528bcccca115c305d6179c41347f","modified":1486453457000},{"_id":"themes/material-flow/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1486453452000},{"_id":"themes/material-flow/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1486453452000},{"_id":"themes/material-flow/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1486453452000},{"_id":"themes/material-flow/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1486453452000},{"_id":"themes/material-flow/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1486453452000},{"_id":"themes/material-flow/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1486453452000},{"_id":"themes/material-flow/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1486453452000},{"_id":"themes/material-flow/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1486453452000},{"_id":"themes/material-flow/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1486453452000},{"_id":"themes/material-flow/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1486453452000},{"_id":"themes/material-flow/layout/_partial/archive.ejs","hash":"d23219de89bf1b8f1ad822865a8db5189e8dcadd","modified":1486453457000},{"_id":"themes/material-flow/layout/_partial/article.ejs","hash":"502c37f00cfd493b6d490ee87f3d4518ddfef765","modified":1486453457000},{"_id":"themes/material-flow/layout/_partial/footer.ejs","hash":"a8d0ee768920a69818e0065a65a94109b72cb77d","modified":1486453457000},{"_id":"themes/material-flow/layout/_partial/categories.ejs","hash":"761fda43c385e81324b628dfab6377b82bfdf82a","modified":1486453457000},{"_id":"themes/material-flow/layout/_partial/head.ejs","hash":"383a4bcde03a4716fe0dcbc8199073173d67edf5","modified":1486453457000},{"_id":"themes/material-flow/layout/_partial/header.ejs","hash":"e7ece67581d8c419620f305c8b597ab1f4a4c3da","modified":1486453457000},{"_id":"themes/material-flow/layout/_partial/loading.ejs","hash":"9c5721d5a5cff00860f2775b12dd73fe62375201","modified":1486453457000},{"_id":"themes/material-flow/layout/_partial/post.ejs","hash":"ac863b6bc02ff7ecf3d17b8d8b46bcdb72f89370","modified":1486453457000},{"_id":"themes/material-flow/layout/_widget/about.ejs","hash":"88398d99c5d48e628a0358d225ed436efec28206","modified":1486453457000},{"_id":"themes/material-flow/layout/_partial/scripts.ejs","hash":"c555b17be7c3f30cf7c4757d5a45565cb3a6b16d","modified":1486453457000},{"_id":"themes/material-flow/layout/_partial/side.ejs","hash":"6c7a3118c718d75fbb0a94627ae6e06ab0026cde","modified":1486453457000},{"_id":"themes/material-flow/layout/_widget/friendly-links.ejs","hash":"87d0f85ab29ee5cac05e4f28fcf6652d187eba93","modified":1486453457000},{"_id":"themes/material-flow/layout/_widget/categories.ejs","hash":"2be2c85e4c5275d08e524fabdb38f046054b874a","modified":1486453457000},{"_id":"themes/material-flow/layout/_widget/tagcloud.ejs","hash":"914698bcc4210b5f984e12166eca3c86de631968","modified":1486453457000},{"_id":"themes/material-flow/source/fonts/icomoon.eot","hash":"09e365cb1dfa85a63d0841b69c30020cff621dad","modified":1486453457000},{"_id":"themes/material-flow/source/fonts/icomoon.ttf","hash":"db33ccce951a88b6a08f147363ace84d20db93ae","modified":1486453457000},{"_id":"themes/material-flow/source/fonts/icomoon.svg","hash":"f3efaca04d1f812242163713838f30147abab693","modified":1486453457000},{"_id":"themes/material-flow/source/fonts/icomoon.woff","hash":"c58f59e279dcc265fb43a0d8378b92064c120ce8","modified":1486453457000},{"_id":"themes/material-flow/source/js/jquery.fitvids.js","hash":"57946a22c79654014eb00fb548f727d302221873","modified":1486453457000},{"_id":"themes/material-flow/source/js/app.js","hash":"03edf52e5d7a3cb3b8ecaf515c802a4b682ffcb4","modified":1486453457000},{"_id":"themes/material-flow/source/fonts/selection.json","hash":"498b5ba0cafb2eb5fa20f9034527eb912fa41827","modified":1486453457000},{"_id":"themes/material-flow/source/less/_archive.less","hash":"d136b3d79b29046f8d2b13e6109acc44f6037f54","modified":1486453457000},{"_id":"themes/material-flow/source/js/search.js","hash":"22c5e08a93a933a920b331b41b1d073277dfd060","modified":1486453457000},{"_id":"themes/material-flow/source/less/_article.less","hash":"f50e71cd7a5a29157c54d576955cefac5aadcf48","modified":1486453457000},{"_id":"themes/material-flow/source/less/_base.less","hash":"d14d3cc9495502f8d8d4ae0c471a54f82f18f210","modified":1486453457000},{"_id":"themes/material-flow/source/less/_fonts.less","hash":"ce6108f218c1a0c3c22b2c11936063a5f29e1b32","modified":1486453457000},{"_id":"themes/material-flow/source/less/_defines.less","hash":"f6be12e8e80e9313f6dfa1127e97ca1509501beb","modified":1486453457000},{"_id":"themes/material-flow/source/less/_footer.less","hash":"973b1f9c62159f345833db5c30db03c351c66c5c","modified":1486453457000},{"_id":"themes/material-flow/source/less/_header.less","hash":"6b133e0072f45697c476b0634d99ed43c9b86a71","modified":1486453457000},{"_id":"themes/material-flow/source/less/_main.less","hash":"17f99ea191b824fc49bc9b9926ef1cd913d19879","modified":1486453457000},{"_id":"themes/material-flow/source/less/_normalize.less","hash":"02fe53286d071637534d5aa2c57c76c168c0d521","modified":1486453457000},{"_id":"themes/material-flow/source/less/_pagination.less","hash":"165e2c369faf70858b731bb6d483d8991259887e","modified":1486453457000},{"_id":"themes/material-flow/source/less/_search.less","hash":"ab1e3d8fdd489adde30723c40726e5e8187a8b6c","modified":1486453457000},{"_id":"themes/material-flow/source/less/_widget.less","hash":"3f6ea0ac4ae3aa0068021bf18ce871b5beae55e9","modified":1486453457000},{"_id":"themes/material-flow/source/less/_side.less","hash":"690b40f8f0a758b800343d5677f330fbea01fa87","modified":1486453457000},{"_id":"themes/material-flow/source/less/_typo.less","hash":"8635fe95a08614f22833c6c159ebf6cf3d731e12","modified":1486453457000},{"_id":"themes/material-flow/.git/objects/pack/pack-02d855c76ae8e1595560cef2877383dab7edf37e.idx","hash":"44ce05f575e9569d6acc5933b4aae8dcacc28a98","modified":1486453457000},{"_id":"themes/material-flow/.git/refs/heads/master","hash":"f87496673e80c96d4018b5eddb4e28580309c70b","modified":1486453457000},{"_id":"themes/material-flow/snapshots/desktop.png","hash":"bf894702fc6df7804b776035be4fa9be00c1c98c","modified":1486453457000},{"_id":"themes/material-flow/.git/logs/refs/heads/master","hash":"963f302f2602528bcccca115c305d6179c41347f","modified":1486453457000},{"_id":"themes/material-flow/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1486453457000},{"_id":"themes/material-flow/.git/logs/refs/remotes/origin/HEAD","hash":"963f302f2602528bcccca115c305d6179c41347f","modified":1486453457000},{"_id":"themes/material-flow/.git/objects/pack/pack-02d855c76ae8e1595560cef2877383dab7edf37e.pack","hash":"182f2023a8c2546a46bd508a5d01a82e7b0c0543","modified":1486453457000},{"_id":"public/atom.xml","hash":"b9d8c6b9a1e052cba23041f79a0296ea8ba7c1ff","modified":1486461980568},{"_id":"public/content.json","hash":"561e5668ff6872939b6fc8b837c2e2f1618723a0","modified":1486461980694},{"_id":"public/search.xml","hash":"090d5f7e535ae15a0e553e9161d3c48a9cbc7447","modified":1486461980701},{"_id":"public/about/index.html","hash":"e8d1948e30b0ca766707fcc2b4dc89c5eec81c8d","modified":1486461980714},{"_id":"public/2017/01/20/javascript-patterns1/index.html","hash":"4679972dc0125f9f1b1cb0ec45019b34aee09796","modified":1486461980714},{"_id":"public/2017/01/20/javascript-patterns3/index.html","hash":"99f5e9d6c22ca1c16900d05847d3f71293f05a14","modified":1486461980714},{"_id":"public/archives/index.html","hash":"1c51be97fa5ab04ed475aa6546218195efe768af","modified":1486461980714},{"_id":"public/archives/2017/01/index.html","hash":"07aaa592646549101f79be797ea6d677fdabf362","modified":1486461980714},{"_id":"public/archives/2017/02/index.html","hash":"4f04148fecac9407c2050b206bc2af70ceab4f81","modified":1486461980714},{"_id":"public/2017/02/07/javascript-patterns2/index.html","hash":"a046d1e5c54ae5918d0f364b8dec99abd3a37234","modified":1486461980715},{"_id":"public/archives/2017/index.html","hash":"afcad56d9c97087c8ba53ddd643c5a71359c83e7","modified":1486461980716},{"_id":"public/categories/javascript/index.html","hash":"cd6daf4dfd3a52495ce54c2febb1e671f6436cf3","modified":1486461980717},{"_id":"public/index.html","hash":"1654abd482e9dd4959600e5eaa1275c3ce64bb37","modified":1486461980717},{"_id":"public/tags/javascript/index.html","hash":"e3fa498eed634db4bc39c6e492bc28eda0d3c1aa","modified":1486461980717},{"_id":"public/tags/patterns/index.html","hash":"0ef4dc460345ee79e20d9c26c23d4a0900ec6b8b","modified":1486461980717},{"_id":"public/images/favicon.png","hash":"c9ea65622c47e91e760f0cad0628065bed3e1170","modified":1486461980719},{"_id":"public/images/avatar.jpg","hash":"ea9970d9caf3fc821ac9752ca9f18c5a8807748b","modified":1486461980719},{"_id":"public/fonts/icomoon.eot","hash":"09e365cb1dfa85a63d0841b69c30020cff621dad","modified":1486461980719},{"_id":"public/fonts/icomoon.ttf","hash":"db33ccce951a88b6a08f147363ace84d20db93ae","modified":1486461980719},{"_id":"public/fonts/icomoon.svg","hash":"f3efaca04d1f812242163713838f30147abab693","modified":1486461980719},{"_id":"public/fonts/icomoon.woff","hash":"c58f59e279dcc265fb43a0d8378b92064c120ce8","modified":1486461980719},{"_id":"public/js/app.js","hash":"03edf52e5d7a3cb3b8ecaf515c802a4b682ffcb4","modified":1486461980746},{"_id":"public/js/jquery.fitvids.js","hash":"57946a22c79654014eb00fb548f727d302221873","modified":1486461980746},{"_id":"public/js/search.js","hash":"22c5e08a93a933a920b331b41b1d073277dfd060","modified":1486461980746},{"_id":"public/fonts/selection.json","hash":"c38f13105ee7c35a67476dd80eaa2ffd037c124b","modified":1486461980746},{"_id":"public/style.css","hash":"03ae19d9c809096b5713406078dbb7893f00c1ae","modified":1486461981134},{"_id":"source/_posts/React Native配置和起步.md","hash":"6378efd0d6b54d610fdee01cc87e82fa78459b49","modified":1486542267000}],"Category":[{"name":"javascript","_id":"ciyvd30id0003heio2l58h6pv"},{"name":"app","_id":"ciywovup20001mqio0n183jpr"}],"Data":[{"_id":"links","data":[{"name":"豆神","url":"https://xxxx.com"},{"name":"雨课堂","url":"http://xxx.com/"},{"name":"中交启星","url":"http://xxx.io/"}]},{"_id":"menu","data":[{"name":"Home","slug":"home","url":"/"},{"name":"Archives","slug":"archives","url":"/archives"},{"name":"About","slug":"about","url":"/about"}]},{"_id":"widgets","data":["about","friendly-links","categories","tagcloud"]}],"Page":[{"title":"陈舟","date":"2017-02-07T08:11:44.000Z","_content":"\n一个前端爱好者，喜欢：\n- Javascript CSS\n- backbone vue\n\n同时我也喜欢：\n- \n- \n\n我的联系方式：\n\n- email:  `964412049@qq.com`\n- Github：   [chenzhou](https://github.com/chenzhou)","source":"about/index.md","raw":"---\ntitle: 陈舟\ndate: 2017-2-7 16:11:44\n---\n\n一个前端爱好者，喜欢：\n- Javascript CSS\n- backbone vue\n\n同时我也喜欢：\n- \n- \n\n我的联系方式：\n\n- email:  `964412049@qq.com`\n- Github：   [chenzhou](https://github.com/chenzhou)","updated":"2017-02-07T09:54:33.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciyvd30i90001heiov9fu5wj5","content":"<p>一个前端爱好者，喜欢：</p>\n<ul>\n<li>Javascript CSS</li>\n<li>backbone vue</li>\n</ul>\n<p>同时我也喜欢：</p>\n<ul>\n<li></li>\n<li></li>\n</ul>\n<p>我的联系方式：</p>\n<ul>\n<li>email:  <code>964412049@qq.com</code></li>\n<li>Github：   <a href=\"https://github.com/chenzhou\" target=\"_blank\" rel=\"external\">chenzhou</a></li>\n</ul>\n","excerpt":"","more":"<p>一个前端爱好者，喜欢：</p>\n<ul>\n<li>Javascript CSS</li>\n<li>backbone vue</li>\n</ul>\n<p>同时我也喜欢：</p>\n<ul>\n<li></li>\n<li></li>\n</ul>\n<p>我的联系方式：</p>\n<ul>\n<li>email:  <code>964412049@qq.com</code></li>\n<li>Github：   <a href=\"https://github.com/chenzhou\">chenzhou</a></li>\n</ul>\n"}],"Post":[{"title":"高质量JavaScript基本要点","date":"2017-02-06T16:00:00.000Z","_content":"\n\n\n<a name=\"a1\"></a>\n# 第二章 高质量JavaScript基本要点\n\n本章将对一些实质内容展开讨论，这些内容包括最佳实践、模式和编写高质量JavaScript代码的习惯，比如避免全局变量、使用单var声明、循环中的length预缓存、遵守编码约定等等。本章还包括一些非必要的编程习惯，但更多的关注点将放在总体的代码创建过程上，包括撰写API文档、组织相互评审以及使用JSLint。这些习惯和最佳实践可以帮助你写出更好的、更易读的和可维护的代码，当几个月后或数年后再重读你的代码时，你就会深有体会了。\n\n<a name=\"a2\"></a>\n## 编写可维护的代码\n\n修复软件bug成本很高，而且随着时间的推移，它们造成的损失也越来越大，特别是在已经打包发布了的软件发现了bug的时候。当然最好是发现bug立刻解决掉，但前提是你对你的代码依然很熟悉，否则当你转身投入到另外一个项目的开发中后，根本不记得当初代码的模样了。过了一段时间后你再去阅读当初的代码你需要：\n\n- 时间来重新学习并理解问题\n- 时间去理解问题相关的代码\n\n对大型项目或者公司来说还有一个不得不考虑的问题，就是解决这个bug的人和制造这个bug的人往往不是同一个人。因此减少理解代码所需的时间成本就显得非常重要，不管是隔了很长时间重读自己的代码还是阅读团队内其他人的代码。这对于公司的利益底线和工程师的幸福指数同样重要，因为每个人都宁愿去开发新的项目而不愿花很多时间和精力去维护旧代码。\n\n另外一个软件开发中的普遍现象是，在读代码上花的时间要远远超过写代码的时间。常常当你专注于某个问题的时候，你会坐下来用一下午的时间产出大量的代码。当时的场景下代码是可以正常运行的，但当应用趋于成熟，会有很多因素促使你重读代码、改进代码或对代码做微调。比如：\n\n- 发现了bug\n- 需要给应用添加新需求\n- 需要将应用迁移到新的平台中运行（比如当市场中出现了新的浏览器时）\n- 代码重构\n- 由于架构更改或者更换另一种语言导致代码重写\n\n这些不确定因素带来的后果是，少数人花几小时写的代码需要很多人花几个星期去阅读它。因此，创建可维护的代码对于一个成功的应用来说至关重要。\n\n可维护的代码意味着代码是：\n\n- 可读的\n- 一致的\n- 可预测的\n- 看起来像是同一个人写的\n- 有文档的\n\n本章接下来的部分会对这几点深入讲解。\n\n<a name=\"a3\"></a>\n## 减少全局对象\n\nJavaScript 使用函数来管理作用域，在一个函数内定义的变量称作“局部变量”，局部变量在函数外部是不可见的。另一方面，“全局变量”是不在任何函数体内部声明的变量，或者是直接使用而未明的变量。\n\n每一个JavaScript运行环境都有一个“全局对象”，不在任何函数体内使用this就可以获得对这个全局对象的引用。你所创建的每一个全局变量都是这个全局对象的属性。为了方便起见，浏览器都会额外提供一个全局对象的属性window，（常常）用以指向全局对象本身。下面的示例代码中展示了如何在浏览器中创建或访问全局变量：\n\n\tmyglobal = \"hello\"; // antipattern\n\tconsole.log(myglobal); // \"hello\"\n\tconsole.log(window.myglobal); // \"hello\"\n\tconsole.log(window[\"myglobal\"]); // \"hello\"\n\tconsole.log(this.myglobal); // \"hello\"\n\n<a name=\"a4\"></a>\n### 全局对象带来的困扰\n\n全局变量的问题是，它们在JavaScript代码执行期间或者整个web页面中始终是可见的。它们存在于同一个命名空间中，因此命名冲突的情况时有发生，毕竟在应用程序的不同模块中，经常会出于某种目的定义相同的全局变量。\n\n同样，常常网页中所嵌入的代码并不是这个网页的开发者所写，比如：\n\n- 网页中使用了第三方的JavaScript库\n- 网页中使用了广告代码\n- 网页中使用了用以分析流量和点击率的第三方统计代码\n- 网页中使用了很多组件，挂件和按钮等等\n\n假设某一段第三方提供的脚本定义了一个全局变量result。随后你在自己写的某个函数中也定义了一个全局变量result。这时，第二个变量就会覆盖第一个，这时就会导致第三方脚本停止工作。\n\n因此，为了让你的脚本和这个页面中的其他脚本和谐相处，要尽可能少的使用全局变量，这一点非常重要。本书随后的章节中会讲到一些减少全局变量的技巧和策略，比如使用命名空间或者立即执行的匿名函数等，但减少全局变量最有效的方法是坚持使用var来声明变量。\n\n由于JavaScript的特点，我们经常有意无意的创建全局变量，毕竟在JavaScript中创建全局变量实在太简单了。首先，你可以不声明而直接使用变量，再者，JavaScirpt中具有“隐式全局对象”的概念，也就是说任何不通过var声明（译注：在JavaScript1.7及以后的版本中，可以通过let来声明块级作用域的变量）的变量都会成为全局对象的一个属性（可以把它们当作全局变量）。看一下下面这段代码：\n\n\tfunction sum(x, y) {\n\t\t// antipattern: implied global\n\t\tresult = x + y;\n\t\treturn result;\n\t}\n\n这段代码中，我们直接使用了result而没有事先声明它。这段代码是能够正常工作的，但在调用这个方法之后，会产生一个全局变量result，这会带来其他问题。\n\n解决办法是，总是使用var来声明变量，下面代码就是改进了的sum()函数：\n\n\tfunction sum(x, y) {\n\t\tvar result = x + y;\n\t\treturn result;\n\t}\n\n这里我们要注意一种反模式，就是在var声明中通过链式赋值的方法创建全局变量。在下面这个代码片段中，a是局部变量，但b是全局变量，而作者的意图显然不是如此：\n\n\t// antipattern, do not use\n\tfunction foo() {\n\t\tvar a = b = 0;\n\t\t// ...\n\t}\n\n为什么会这样？因为这里的计算顺序是从右至左的。首先计算表达式b=0，这里的b是未声明的，这个表达式的值是0，然后通过var创建了局部变量a，并赋值为0。换言之，可以等价的将代码写成这样：\n\n\tvar a = (b = 0);\n\n如果变量b已经被声明，这种链式赋值的写法是ok的，不会意外的创建全局变量，比如：\n\n\tfunction foo() {\n\t\tvar a, b;\n\t\t// ...\n\t\ta = b = 0; // both local\n\t}\n\n> 避免使用全局变量的另一个原因是出于可移植性考虑的，如果你希望将你的代码运行于不同的平台环境（宿主），使用全局变量则非常危险。很有可能你无意间创建的某个全局变量在当前的平台环境中是不存在的，你认为可以安全的使用，而在其他的环境中却是存在的。\n\n","source":"_posts/javascript-patterns2.md","raw":"---\ntitle: 高质量JavaScript基本要点\ndate: 2017-2-7\ntags:\n - javascript\n - patterns\ncategories:\n - javascript\n---\n\n\n\n<a name=\"a1\"></a>\n# 第二章 高质量JavaScript基本要点\n\n本章将对一些实质内容展开讨论，这些内容包括最佳实践、模式和编写高质量JavaScript代码的习惯，比如避免全局变量、使用单var声明、循环中的length预缓存、遵守编码约定等等。本章还包括一些非必要的编程习惯，但更多的关注点将放在总体的代码创建过程上，包括撰写API文档、组织相互评审以及使用JSLint。这些习惯和最佳实践可以帮助你写出更好的、更易读的和可维护的代码，当几个月后或数年后再重读你的代码时，你就会深有体会了。\n\n<a name=\"a2\"></a>\n## 编写可维护的代码\n\n修复软件bug成本很高，而且随着时间的推移，它们造成的损失也越来越大，特别是在已经打包发布了的软件发现了bug的时候。当然最好是发现bug立刻解决掉，但前提是你对你的代码依然很熟悉，否则当你转身投入到另外一个项目的开发中后，根本不记得当初代码的模样了。过了一段时间后你再去阅读当初的代码你需要：\n\n- 时间来重新学习并理解问题\n- 时间去理解问题相关的代码\n\n对大型项目或者公司来说还有一个不得不考虑的问题，就是解决这个bug的人和制造这个bug的人往往不是同一个人。因此减少理解代码所需的时间成本就显得非常重要，不管是隔了很长时间重读自己的代码还是阅读团队内其他人的代码。这对于公司的利益底线和工程师的幸福指数同样重要，因为每个人都宁愿去开发新的项目而不愿花很多时间和精力去维护旧代码。\n\n另外一个软件开发中的普遍现象是，在读代码上花的时间要远远超过写代码的时间。常常当你专注于某个问题的时候，你会坐下来用一下午的时间产出大量的代码。当时的场景下代码是可以正常运行的，但当应用趋于成熟，会有很多因素促使你重读代码、改进代码或对代码做微调。比如：\n\n- 发现了bug\n- 需要给应用添加新需求\n- 需要将应用迁移到新的平台中运行（比如当市场中出现了新的浏览器时）\n- 代码重构\n- 由于架构更改或者更换另一种语言导致代码重写\n\n这些不确定因素带来的后果是，少数人花几小时写的代码需要很多人花几个星期去阅读它。因此，创建可维护的代码对于一个成功的应用来说至关重要。\n\n可维护的代码意味着代码是：\n\n- 可读的\n- 一致的\n- 可预测的\n- 看起来像是同一个人写的\n- 有文档的\n\n本章接下来的部分会对这几点深入讲解。\n\n<a name=\"a3\"></a>\n## 减少全局对象\n\nJavaScript 使用函数来管理作用域，在一个函数内定义的变量称作“局部变量”，局部变量在函数外部是不可见的。另一方面，“全局变量”是不在任何函数体内部声明的变量，或者是直接使用而未明的变量。\n\n每一个JavaScript运行环境都有一个“全局对象”，不在任何函数体内使用this就可以获得对这个全局对象的引用。你所创建的每一个全局变量都是这个全局对象的属性。为了方便起见，浏览器都会额外提供一个全局对象的属性window，（常常）用以指向全局对象本身。下面的示例代码中展示了如何在浏览器中创建或访问全局变量：\n\n\tmyglobal = \"hello\"; // antipattern\n\tconsole.log(myglobal); // \"hello\"\n\tconsole.log(window.myglobal); // \"hello\"\n\tconsole.log(window[\"myglobal\"]); // \"hello\"\n\tconsole.log(this.myglobal); // \"hello\"\n\n<a name=\"a4\"></a>\n### 全局对象带来的困扰\n\n全局变量的问题是，它们在JavaScript代码执行期间或者整个web页面中始终是可见的。它们存在于同一个命名空间中，因此命名冲突的情况时有发生，毕竟在应用程序的不同模块中，经常会出于某种目的定义相同的全局变量。\n\n同样，常常网页中所嵌入的代码并不是这个网页的开发者所写，比如：\n\n- 网页中使用了第三方的JavaScript库\n- 网页中使用了广告代码\n- 网页中使用了用以分析流量和点击率的第三方统计代码\n- 网页中使用了很多组件，挂件和按钮等等\n\n假设某一段第三方提供的脚本定义了一个全局变量result。随后你在自己写的某个函数中也定义了一个全局变量result。这时，第二个变量就会覆盖第一个，这时就会导致第三方脚本停止工作。\n\n因此，为了让你的脚本和这个页面中的其他脚本和谐相处，要尽可能少的使用全局变量，这一点非常重要。本书随后的章节中会讲到一些减少全局变量的技巧和策略，比如使用命名空间或者立即执行的匿名函数等，但减少全局变量最有效的方法是坚持使用var来声明变量。\n\n由于JavaScript的特点，我们经常有意无意的创建全局变量，毕竟在JavaScript中创建全局变量实在太简单了。首先，你可以不声明而直接使用变量，再者，JavaScirpt中具有“隐式全局对象”的概念，也就是说任何不通过var声明（译注：在JavaScript1.7及以后的版本中，可以通过let来声明块级作用域的变量）的变量都会成为全局对象的一个属性（可以把它们当作全局变量）。看一下下面这段代码：\n\n\tfunction sum(x, y) {\n\t\t// antipattern: implied global\n\t\tresult = x + y;\n\t\treturn result;\n\t}\n\n这段代码中，我们直接使用了result而没有事先声明它。这段代码是能够正常工作的，但在调用这个方法之后，会产生一个全局变量result，这会带来其他问题。\n\n解决办法是，总是使用var来声明变量，下面代码就是改进了的sum()函数：\n\n\tfunction sum(x, y) {\n\t\tvar result = x + y;\n\t\treturn result;\n\t}\n\n这里我们要注意一种反模式，就是在var声明中通过链式赋值的方法创建全局变量。在下面这个代码片段中，a是局部变量，但b是全局变量，而作者的意图显然不是如此：\n\n\t// antipattern, do not use\n\tfunction foo() {\n\t\tvar a = b = 0;\n\t\t// ...\n\t}\n\n为什么会这样？因为这里的计算顺序是从右至左的。首先计算表达式b=0，这里的b是未声明的，这个表达式的值是0，然后通过var创建了局部变量a，并赋值为0。换言之，可以等价的将代码写成这样：\n\n\tvar a = (b = 0);\n\n如果变量b已经被声明，这种链式赋值的写法是ok的，不会意外的创建全局变量，比如：\n\n\tfunction foo() {\n\t\tvar a, b;\n\t\t// ...\n\t\ta = b = 0; // both local\n\t}\n\n> 避免使用全局变量的另一个原因是出于可移植性考虑的，如果你希望将你的代码运行于不同的平台环境（宿主），使用全局变量则非常危险。很有可能你无意间创建的某个全局变量在当前的平台环境中是不存在的，你认为可以安全的使用，而在其他的环境中却是存在的。\n\n","slug":"javascript-patterns2","published":1,"updated":"2017-02-07T09:45:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyvd30i50000heiomn8duuf0","content":"<p><a name=\"a1\"></a></p>\n<h1 id=\"第二章-高质量JavaScript基本要点\"><a href=\"#第二章-高质量JavaScript基本要点\" class=\"headerlink\" title=\"第二章 高质量JavaScript基本要点\"></a>第二章 高质量JavaScript基本要点</h1><p>本章将对一些实质内容展开讨论，这些内容包括最佳实践、模式和编写高质量JavaScript代码的习惯，比如避免全局变量、使用单var声明、循环中的length预缓存、遵守编码约定等等。本章还包括一些非必要的编程习惯，但更多的关注点将放在总体的代码创建过程上，包括撰写API文档、组织相互评审以及使用JSLint。这些习惯和最佳实践可以帮助你写出更好的、更易读的和可维护的代码，当几个月后或数年后再重读你的代码时，你就会深有体会了。</p>\n<p><a name=\"a2\"></a></p>\n<h2 id=\"编写可维护的代码\"><a href=\"#编写可维护的代码\" class=\"headerlink\" title=\"编写可维护的代码\"></a>编写可维护的代码</h2><p>修复软件bug成本很高，而且随着时间的推移，它们造成的损失也越来越大，特别是在已经打包发布了的软件发现了bug的时候。当然最好是发现bug立刻解决掉，但前提是你对你的代码依然很熟悉，否则当你转身投入到另外一个项目的开发中后，根本不记得当初代码的模样了。过了一段时间后你再去阅读当初的代码你需要：</p>\n<ul>\n<li>时间来重新学习并理解问题</li>\n<li>时间去理解问题相关的代码</li>\n</ul>\n<p>对大型项目或者公司来说还有一个不得不考虑的问题，就是解决这个bug的人和制造这个bug的人往往不是同一个人。因此减少理解代码所需的时间成本就显得非常重要，不管是隔了很长时间重读自己的代码还是阅读团队内其他人的代码。这对于公司的利益底线和工程师的幸福指数同样重要，因为每个人都宁愿去开发新的项目而不愿花很多时间和精力去维护旧代码。</p>\n<p>另外一个软件开发中的普遍现象是，在读代码上花的时间要远远超过写代码的时间。常常当你专注于某个问题的时候，你会坐下来用一下午的时间产出大量的代码。当时的场景下代码是可以正常运行的，但当应用趋于成熟，会有很多因素促使你重读代码、改进代码或对代码做微调。比如：</p>\n<ul>\n<li>发现了bug</li>\n<li>需要给应用添加新需求</li>\n<li>需要将应用迁移到新的平台中运行（比如当市场中出现了新的浏览器时）</li>\n<li>代码重构</li>\n<li>由于架构更改或者更换另一种语言导致代码重写</li>\n</ul>\n<p>这些不确定因素带来的后果是，少数人花几小时写的代码需要很多人花几个星期去阅读它。因此，创建可维护的代码对于一个成功的应用来说至关重要。</p>\n<p>可维护的代码意味着代码是：</p>\n<ul>\n<li>可读的</li>\n<li>一致的</li>\n<li>可预测的</li>\n<li>看起来像是同一个人写的</li>\n<li>有文档的</li>\n</ul>\n<p>本章接下来的部分会对这几点深入讲解。</p>\n<p><a name=\"a3\"></a></p>\n<h2 id=\"减少全局对象\"><a href=\"#减少全局对象\" class=\"headerlink\" title=\"减少全局对象\"></a>减少全局对象</h2><p>JavaScript 使用函数来管理作用域，在一个函数内定义的变量称作“局部变量”，局部变量在函数外部是不可见的。另一方面，“全局变量”是不在任何函数体内部声明的变量，或者是直接使用而未明的变量。</p>\n<p>每一个JavaScript运行环境都有一个“全局对象”，不在任何函数体内使用this就可以获得对这个全局对象的引用。你所创建的每一个全局变量都是这个全局对象的属性。为了方便起见，浏览器都会额外提供一个全局对象的属性window，（常常）用以指向全局对象本身。下面的示例代码中展示了如何在浏览器中创建或访问全局变量：</p>\n<pre><code>myglobal = &quot;hello&quot;; // antipattern\nconsole.log(myglobal); // &quot;hello&quot;\nconsole.log(window.myglobal); // &quot;hello&quot;\nconsole.log(window[&quot;myglobal&quot;]); // &quot;hello&quot;\nconsole.log(this.myglobal); // &quot;hello&quot;\n</code></pre><p><a name=\"a4\"></a></p>\n<h3 id=\"全局对象带来的困扰\"><a href=\"#全局对象带来的困扰\" class=\"headerlink\" title=\"全局对象带来的困扰\"></a>全局对象带来的困扰</h3><p>全局变量的问题是，它们在JavaScript代码执行期间或者整个web页面中始终是可见的。它们存在于同一个命名空间中，因此命名冲突的情况时有发生，毕竟在应用程序的不同模块中，经常会出于某种目的定义相同的全局变量。</p>\n<p>同样，常常网页中所嵌入的代码并不是这个网页的开发者所写，比如：</p>\n<ul>\n<li>网页中使用了第三方的JavaScript库</li>\n<li>网页中使用了广告代码</li>\n<li>网页中使用了用以分析流量和点击率的第三方统计代码</li>\n<li>网页中使用了很多组件，挂件和按钮等等</li>\n</ul>\n<p>假设某一段第三方提供的脚本定义了一个全局变量result。随后你在自己写的某个函数中也定义了一个全局变量result。这时，第二个变量就会覆盖第一个，这时就会导致第三方脚本停止工作。</p>\n<p>因此，为了让你的脚本和这个页面中的其他脚本和谐相处，要尽可能少的使用全局变量，这一点非常重要。本书随后的章节中会讲到一些减少全局变量的技巧和策略，比如使用命名空间或者立即执行的匿名函数等，但减少全局变量最有效的方法是坚持使用var来声明变量。</p>\n<p>由于JavaScript的特点，我们经常有意无意的创建全局变量，毕竟在JavaScript中创建全局变量实在太简单了。首先，你可以不声明而直接使用变量，再者，JavaScirpt中具有“隐式全局对象”的概念，也就是说任何不通过var声明（译注：在JavaScript1.7及以后的版本中，可以通过let来声明块级作用域的变量）的变量都会成为全局对象的一个属性（可以把它们当作全局变量）。看一下下面这段代码：</p>\n<pre><code>function sum(x, y) {\n    // antipattern: implied global\n    result = x + y;\n    return result;\n}\n</code></pre><p>这段代码中，我们直接使用了result而没有事先声明它。这段代码是能够正常工作的，但在调用这个方法之后，会产生一个全局变量result，这会带来其他问题。</p>\n<p>解决办法是，总是使用var来声明变量，下面代码就是改进了的sum()函数：</p>\n<pre><code>function sum(x, y) {\n    var result = x + y;\n    return result;\n}\n</code></pre><p>这里我们要注意一种反模式，就是在var声明中通过链式赋值的方法创建全局变量。在下面这个代码片段中，a是局部变量，但b是全局变量，而作者的意图显然不是如此：</p>\n<pre><code>// antipattern, do not use\nfunction foo() {\n    var a = b = 0;\n    // ...\n}\n</code></pre><p>为什么会这样？因为这里的计算顺序是从右至左的。首先计算表达式b=0，这里的b是未声明的，这个表达式的值是0，然后通过var创建了局部变量a，并赋值为0。换言之，可以等价的将代码写成这样：</p>\n<pre><code>var a = (b = 0);\n</code></pre><p>如果变量b已经被声明，这种链式赋值的写法是ok的，不会意外的创建全局变量，比如：</p>\n<pre><code>function foo() {\n    var a, b;\n    // ...\n    a = b = 0; // both local\n}\n</code></pre><blockquote>\n<p>避免使用全局变量的另一个原因是出于可移植性考虑的，如果你希望将你的代码运行于不同的平台环境（宿主），使用全局变量则非常危险。很有可能你无意间创建的某个全局变量在当前的平台环境中是不存在的，你认为可以安全的使用，而在其他的环境中却是存在的。</p>\n</blockquote>\n","excerpt":"","more":"<p><a name=\"a1\"></a></p>\n<h1 id=\"第二章-高质量JavaScript基本要点\"><a href=\"#第二章-高质量JavaScript基本要点\" class=\"headerlink\" title=\"第二章 高质量JavaScript基本要点\"></a>第二章 高质量JavaScript基本要点</h1><p>本章将对一些实质内容展开讨论，这些内容包括最佳实践、模式和编写高质量JavaScript代码的习惯，比如避免全局变量、使用单var声明、循环中的length预缓存、遵守编码约定等等。本章还包括一些非必要的编程习惯，但更多的关注点将放在总体的代码创建过程上，包括撰写API文档、组织相互评审以及使用JSLint。这些习惯和最佳实践可以帮助你写出更好的、更易读的和可维护的代码，当几个月后或数年后再重读你的代码时，你就会深有体会了。</p>\n<p><a name=\"a2\"></a></p>\n<h2 id=\"编写可维护的代码\"><a href=\"#编写可维护的代码\" class=\"headerlink\" title=\"编写可维护的代码\"></a>编写可维护的代码</h2><p>修复软件bug成本很高，而且随着时间的推移，它们造成的损失也越来越大，特别是在已经打包发布了的软件发现了bug的时候。当然最好是发现bug立刻解决掉，但前提是你对你的代码依然很熟悉，否则当你转身投入到另外一个项目的开发中后，根本不记得当初代码的模样了。过了一段时间后你再去阅读当初的代码你需要：</p>\n<ul>\n<li>时间来重新学习并理解问题</li>\n<li>时间去理解问题相关的代码</li>\n</ul>\n<p>对大型项目或者公司来说还有一个不得不考虑的问题，就是解决这个bug的人和制造这个bug的人往往不是同一个人。因此减少理解代码所需的时间成本就显得非常重要，不管是隔了很长时间重读自己的代码还是阅读团队内其他人的代码。这对于公司的利益底线和工程师的幸福指数同样重要，因为每个人都宁愿去开发新的项目而不愿花很多时间和精力去维护旧代码。</p>\n<p>另外一个软件开发中的普遍现象是，在读代码上花的时间要远远超过写代码的时间。常常当你专注于某个问题的时候，你会坐下来用一下午的时间产出大量的代码。当时的场景下代码是可以正常运行的，但当应用趋于成熟，会有很多因素促使你重读代码、改进代码或对代码做微调。比如：</p>\n<ul>\n<li>发现了bug</li>\n<li>需要给应用添加新需求</li>\n<li>需要将应用迁移到新的平台中运行（比如当市场中出现了新的浏览器时）</li>\n<li>代码重构</li>\n<li>由于架构更改或者更换另一种语言导致代码重写</li>\n</ul>\n<p>这些不确定因素带来的后果是，少数人花几小时写的代码需要很多人花几个星期去阅读它。因此，创建可维护的代码对于一个成功的应用来说至关重要。</p>\n<p>可维护的代码意味着代码是：</p>\n<ul>\n<li>可读的</li>\n<li>一致的</li>\n<li>可预测的</li>\n<li>看起来像是同一个人写的</li>\n<li>有文档的</li>\n</ul>\n<p>本章接下来的部分会对这几点深入讲解。</p>\n<p><a name=\"a3\"></a></p>\n<h2 id=\"减少全局对象\"><a href=\"#减少全局对象\" class=\"headerlink\" title=\"减少全局对象\"></a>减少全局对象</h2><p>JavaScript 使用函数来管理作用域，在一个函数内定义的变量称作“局部变量”，局部变量在函数外部是不可见的。另一方面，“全局变量”是不在任何函数体内部声明的变量，或者是直接使用而未明的变量。</p>\n<p>每一个JavaScript运行环境都有一个“全局对象”，不在任何函数体内使用this就可以获得对这个全局对象的引用。你所创建的每一个全局变量都是这个全局对象的属性。为了方便起见，浏览器都会额外提供一个全局对象的属性window，（常常）用以指向全局对象本身。下面的示例代码中展示了如何在浏览器中创建或访问全局变量：</p>\n<pre><code>myglobal = &quot;hello&quot;; // antipattern\nconsole.log(myglobal); // &quot;hello&quot;\nconsole.log(window.myglobal); // &quot;hello&quot;\nconsole.log(window[&quot;myglobal&quot;]); // &quot;hello&quot;\nconsole.log(this.myglobal); // &quot;hello&quot;\n</code></pre><p><a name=\"a4\"></a></p>\n<h3 id=\"全局对象带来的困扰\"><a href=\"#全局对象带来的困扰\" class=\"headerlink\" title=\"全局对象带来的困扰\"></a>全局对象带来的困扰</h3><p>全局变量的问题是，它们在JavaScript代码执行期间或者整个web页面中始终是可见的。它们存在于同一个命名空间中，因此命名冲突的情况时有发生，毕竟在应用程序的不同模块中，经常会出于某种目的定义相同的全局变量。</p>\n<p>同样，常常网页中所嵌入的代码并不是这个网页的开发者所写，比如：</p>\n<ul>\n<li>网页中使用了第三方的JavaScript库</li>\n<li>网页中使用了广告代码</li>\n<li>网页中使用了用以分析流量和点击率的第三方统计代码</li>\n<li>网页中使用了很多组件，挂件和按钮等等</li>\n</ul>\n<p>假设某一段第三方提供的脚本定义了一个全局变量result。随后你在自己写的某个函数中也定义了一个全局变量result。这时，第二个变量就会覆盖第一个，这时就会导致第三方脚本停止工作。</p>\n<p>因此，为了让你的脚本和这个页面中的其他脚本和谐相处，要尽可能少的使用全局变量，这一点非常重要。本书随后的章节中会讲到一些减少全局变量的技巧和策略，比如使用命名空间或者立即执行的匿名函数等，但减少全局变量最有效的方法是坚持使用var来声明变量。</p>\n<p>由于JavaScript的特点，我们经常有意无意的创建全局变量，毕竟在JavaScript中创建全局变量实在太简单了。首先，你可以不声明而直接使用变量，再者，JavaScirpt中具有“隐式全局对象”的概念，也就是说任何不通过var声明（译注：在JavaScript1.7及以后的版本中，可以通过let来声明块级作用域的变量）的变量都会成为全局对象的一个属性（可以把它们当作全局变量）。看一下下面这段代码：</p>\n<pre><code>function sum(x, y) {\n    // antipattern: implied global\n    result = x + y;\n    return result;\n}\n</code></pre><p>这段代码中，我们直接使用了result而没有事先声明它。这段代码是能够正常工作的，但在调用这个方法之后，会产生一个全局变量result，这会带来其他问题。</p>\n<p>解决办法是，总是使用var来声明变量，下面代码就是改进了的sum()函数：</p>\n<pre><code>function sum(x, y) {\n    var result = x + y;\n    return result;\n}\n</code></pre><p>这里我们要注意一种反模式，就是在var声明中通过链式赋值的方法创建全局变量。在下面这个代码片段中，a是局部变量，但b是全局变量，而作者的意图显然不是如此：</p>\n<pre><code>// antipattern, do not use\nfunction foo() {\n    var a = b = 0;\n    // ...\n}\n</code></pre><p>为什么会这样？因为这里的计算顺序是从右至左的。首先计算表达式b=0，这里的b是未声明的，这个表达式的值是0，然后通过var创建了局部变量a，并赋值为0。换言之，可以等价的将代码写成这样：</p>\n<pre><code>var a = (b = 0);\n</code></pre><p>如果变量b已经被声明，这种链式赋值的写法是ok的，不会意外的创建全局变量，比如：</p>\n<pre><code>function foo() {\n    var a, b;\n    // ...\n    a = b = 0; // both local\n}\n</code></pre><blockquote>\n<p>避免使用全局变量的另一个原因是出于可移植性考虑的，如果你希望将你的代码运行于不同的平台环境（宿主），使用全局变量则非常危险。很有可能你无意间创建的某个全局变量在当前的平台环境中是不存在的，你认为可以安全的使用，而在其他的环境中却是存在的。</p>\n</blockquote>\n"},{"title":"概述about","date":"2017-01-19T16:00:00.000Z","_content":"\n\n\n# 第一章 概述\n\nJavaScript是一门Web开发语言。起初只是用来操作网页中为数不多的元素（比如图片和表单域），但谁也没想到这门语言的成长是如此迅速。除了适用于客户端浏览器编程，如今JavaScript程序可以运行于越来越多的平台之上。你可以用它来进行服务器端开发（使用.Net或Node.js）、桌面应用程序开发（运行于桌面操作系统）、以及应用程序扩展（Firefox插件或者Photoshop扩展）、移动终端应用和纯命令行的批处理脚本。\n\nJavaScript同样是一门不寻常的语言。它没有类，许多场景中它使用函数作为一等对象。起初，许多开发者认为这门语言存在很多缺陷，但最近几年情况发生了微妙的变化。有意思的是，有一些老牌语言比如Java和PHP也已经开始添加诸如闭包和匿名函数等新特性，而闭包和匿名函数则是JavaScript程序员最愿意津津乐道的话题。\n\nJavaScript十分灵活，可以用你所熟悉的其他任何编程语言的编程风格来写JavaScript程序。但最好的方式还是拥抱它所带来的变化、学习它所特有的编程模式。\n\n## 模式\n\n对 “模式”的广义解释是“反复发生的事件或对象的固定用法...可以用来作为重复使用的模板或模型”（http://en.wikipedia.org/wiki/Pattern）。\n\n在软件开发领域，模式是指常见问题的通用解决方案。模式不是简单的代码复制和粘贴，而是一种最佳实践，一种高级抽象，是解决某一类问题的范本。\n\n识别这些模式非常重要，因为：\n\n- 这些模式提供了经过论证的最佳实践，它可以帮助我们更好的编码，避免重复制造车轮。\n- 这些模式提供了高一层的抽象，某个时间段内大脑只能处理一定复杂度的逻辑，因此当你处理更繁琐棘手的问题时，它会帮你理清头绪，你才不会被低级的琐事阻碍大脑思考，因为所有的细枝末节都可以被归类和切分成不同的块（模式）。\n- 这些模式为开发者和团队提供了沟通的渠道，团队开发者之间往往是异地协作，不会有经常面对面的沟通机会。简单的代码编写技巧和技术问题处理方式的约定（代码注释）使得开发者之间的交流更加通畅。例如，“函数立即执行”用大白话表述成“你写好一个函数后，在函数的结束花括号的后面添加一对括号，这样能在定义函数结束后马上执行这个函数”（我的天）。\n\n本书将着重讨论下面这三种模式：\n\n- 设计模式（Design patterns）\n- 编码模式（Coding patterns）\n- 反模式（Antipatterns）\n\n设计模式最初的定义是来自于“GoF”（四人组，94年版“设计模式”的四个作者）的一本书，这本书在1994年出版，书名全称是“设计模式：可复用面向对象软件基础”。书中列举了一些重要的设计模式，比如单体、工厂、装饰者、观察者等等。但适用于JavaScript的设计模式并不多，尽管设计模式是脱离某种语言而存在的，但通常会以某种语言做范例来讲解设计模式，这些语言多是强类型语言，比如C++和Java。有时直接将其应用于弱类型的动态语言比如JavaScript又显得捉襟见肘。通常这些设计模式都是基于语言的强类型特性以及类的继承。而JavaScript则需要某种轻型的替代方案。本书在第七章将讨论基于 JavaScript实现的一些设计模式。\n\n编码模式更有趣一些。它们是JavaScript特有的模式和最佳实践，它利用了这门语言独有的一些特性，比如对函数的灵活运用，JavaScript编码模式是本书所要讨论的重点内容。\n\n本书中你会偶尔读到一点关于“反模式”的内容，顾名思义，反模式具有某些负作用甚至破坏性，书中会顺便一提。反模式并不是bug或代码错误，它只是一种处理问题的对策，只是这种对策带来的麻烦远超过他们解决的问题。在示例代码中我们会对反模式做明显的标注。\n","source":"_posts/javascript-patterns1.md","raw":"---\ntitle: 概述about\ndate: 2017-1-20\ntags:\n - javascript\n - patterns\ncategories:\n - javascript\n---\n\n\n\n# 第一章 概述\n\nJavaScript是一门Web开发语言。起初只是用来操作网页中为数不多的元素（比如图片和表单域），但谁也没想到这门语言的成长是如此迅速。除了适用于客户端浏览器编程，如今JavaScript程序可以运行于越来越多的平台之上。你可以用它来进行服务器端开发（使用.Net或Node.js）、桌面应用程序开发（运行于桌面操作系统）、以及应用程序扩展（Firefox插件或者Photoshop扩展）、移动终端应用和纯命令行的批处理脚本。\n\nJavaScript同样是一门不寻常的语言。它没有类，许多场景中它使用函数作为一等对象。起初，许多开发者认为这门语言存在很多缺陷，但最近几年情况发生了微妙的变化。有意思的是，有一些老牌语言比如Java和PHP也已经开始添加诸如闭包和匿名函数等新特性，而闭包和匿名函数则是JavaScript程序员最愿意津津乐道的话题。\n\nJavaScript十分灵活，可以用你所熟悉的其他任何编程语言的编程风格来写JavaScript程序。但最好的方式还是拥抱它所带来的变化、学习它所特有的编程模式。\n\n## 模式\n\n对 “模式”的广义解释是“反复发生的事件或对象的固定用法...可以用来作为重复使用的模板或模型”（http://en.wikipedia.org/wiki/Pattern）。\n\n在软件开发领域，模式是指常见问题的通用解决方案。模式不是简单的代码复制和粘贴，而是一种最佳实践，一种高级抽象，是解决某一类问题的范本。\n\n识别这些模式非常重要，因为：\n\n- 这些模式提供了经过论证的最佳实践，它可以帮助我们更好的编码，避免重复制造车轮。\n- 这些模式提供了高一层的抽象，某个时间段内大脑只能处理一定复杂度的逻辑，因此当你处理更繁琐棘手的问题时，它会帮你理清头绪，你才不会被低级的琐事阻碍大脑思考，因为所有的细枝末节都可以被归类和切分成不同的块（模式）。\n- 这些模式为开发者和团队提供了沟通的渠道，团队开发者之间往往是异地协作，不会有经常面对面的沟通机会。简单的代码编写技巧和技术问题处理方式的约定（代码注释）使得开发者之间的交流更加通畅。例如，“函数立即执行”用大白话表述成“你写好一个函数后，在函数的结束花括号的后面添加一对括号，这样能在定义函数结束后马上执行这个函数”（我的天）。\n\n本书将着重讨论下面这三种模式：\n\n- 设计模式（Design patterns）\n- 编码模式（Coding patterns）\n- 反模式（Antipatterns）\n\n设计模式最初的定义是来自于“GoF”（四人组，94年版“设计模式”的四个作者）的一本书，这本书在1994年出版，书名全称是“设计模式：可复用面向对象软件基础”。书中列举了一些重要的设计模式，比如单体、工厂、装饰者、观察者等等。但适用于JavaScript的设计模式并不多，尽管设计模式是脱离某种语言而存在的，但通常会以某种语言做范例来讲解设计模式，这些语言多是强类型语言，比如C++和Java。有时直接将其应用于弱类型的动态语言比如JavaScript又显得捉襟见肘。通常这些设计模式都是基于语言的强类型特性以及类的继承。而JavaScript则需要某种轻型的替代方案。本书在第七章将讨论基于 JavaScript实现的一些设计模式。\n\n编码模式更有趣一些。它们是JavaScript特有的模式和最佳实践，它利用了这门语言独有的一些特性，比如对函数的灵活运用，JavaScript编码模式是本书所要讨论的重点内容。\n\n本书中你会偶尔读到一点关于“反模式”的内容，顾名思义，反模式具有某些负作用甚至破坏性，书中会顺便一提。反模式并不是bug或代码错误，它只是一种处理问题的对策，只是这种对策带来的麻烦远超过他们解决的问题。在示例代码中我们会对反模式做明显的标注。\n","slug":"javascript-patterns1","published":1,"updated":"2017-02-07T09:53:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyvd30ib0002heiogb9kxx6k","content":"<h1 id=\"第一章-概述\"><a href=\"#第一章-概述\" class=\"headerlink\" title=\"第一章 概述\"></a>第一章 概述</h1><p>JavaScript是一门Web开发语言。起初只是用来操作网页中为数不多的元素（比如图片和表单域），但谁也没想到这门语言的成长是如此迅速。除了适用于客户端浏览器编程，如今JavaScript程序可以运行于越来越多的平台之上。你可以用它来进行服务器端开发（使用.Net或Node.js）、桌面应用程序开发（运行于桌面操作系统）、以及应用程序扩展（Firefox插件或者Photoshop扩展）、移动终端应用和纯命令行的批处理脚本。</p>\n<p>JavaScript同样是一门不寻常的语言。它没有类，许多场景中它使用函数作为一等对象。起初，许多开发者认为这门语言存在很多缺陷，但最近几年情况发生了微妙的变化。有意思的是，有一些老牌语言比如Java和PHP也已经开始添加诸如闭包和匿名函数等新特性，而闭包和匿名函数则是JavaScript程序员最愿意津津乐道的话题。</p>\n<p>JavaScript十分灵活，可以用你所熟悉的其他任何编程语言的编程风格来写JavaScript程序。但最好的方式还是拥抱它所带来的变化、学习它所特有的编程模式。</p>\n<h2 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h2><p>对 “模式”的广义解释是“反复发生的事件或对象的固定用法…可以用来作为重复使用的模板或模型”（<a href=\"http://en.wikipedia.org/wiki/Pattern）。\" target=\"_blank\" rel=\"external\">http://en.wikipedia.org/wiki/Pattern）。</a></p>\n<p>在软件开发领域，模式是指常见问题的通用解决方案。模式不是简单的代码复制和粘贴，而是一种最佳实践，一种高级抽象，是解决某一类问题的范本。</p>\n<p>识别这些模式非常重要，因为：</p>\n<ul>\n<li>这些模式提供了经过论证的最佳实践，它可以帮助我们更好的编码，避免重复制造车轮。</li>\n<li>这些模式提供了高一层的抽象，某个时间段内大脑只能处理一定复杂度的逻辑，因此当你处理更繁琐棘手的问题时，它会帮你理清头绪，你才不会被低级的琐事阻碍大脑思考，因为所有的细枝末节都可以被归类和切分成不同的块（模式）。</li>\n<li>这些模式为开发者和团队提供了沟通的渠道，团队开发者之间往往是异地协作，不会有经常面对面的沟通机会。简单的代码编写技巧和技术问题处理方式的约定（代码注释）使得开发者之间的交流更加通畅。例如，“函数立即执行”用大白话表述成“你写好一个函数后，在函数的结束花括号的后面添加一对括号，这样能在定义函数结束后马上执行这个函数”（我的天）。</li>\n</ul>\n<p>本书将着重讨论下面这三种模式：</p>\n<ul>\n<li>设计模式（Design patterns）</li>\n<li>编码模式（Coding patterns）</li>\n<li>反模式（Antipatterns）</li>\n</ul>\n<p>设计模式最初的定义是来自于“GoF”（四人组，94年版“设计模式”的四个作者）的一本书，这本书在1994年出版，书名全称是“设计模式：可复用面向对象软件基础”。书中列举了一些重要的设计模式，比如单体、工厂、装饰者、观察者等等。但适用于JavaScript的设计模式并不多，尽管设计模式是脱离某种语言而存在的，但通常会以某种语言做范例来讲解设计模式，这些语言多是强类型语言，比如C++和Java。有时直接将其应用于弱类型的动态语言比如JavaScript又显得捉襟见肘。通常这些设计模式都是基于语言的强类型特性以及类的继承。而JavaScript则需要某种轻型的替代方案。本书在第七章将讨论基于 JavaScript实现的一些设计模式。</p>\n<p>编码模式更有趣一些。它们是JavaScript特有的模式和最佳实践，它利用了这门语言独有的一些特性，比如对函数的灵活运用，JavaScript编码模式是本书所要讨论的重点内容。</p>\n<p>本书中你会偶尔读到一点关于“反模式”的内容，顾名思义，反模式具有某些负作用甚至破坏性，书中会顺便一提。反模式并不是bug或代码错误，它只是一种处理问题的对策，只是这种对策带来的麻烦远超过他们解决的问题。在示例代码中我们会对反模式做明显的标注。</p>\n","excerpt":"","more":"<h1 id=\"第一章-概述\"><a href=\"#第一章-概述\" class=\"headerlink\" title=\"第一章 概述\"></a>第一章 概述</h1><p>JavaScript是一门Web开发语言。起初只是用来操作网页中为数不多的元素（比如图片和表单域），但谁也没想到这门语言的成长是如此迅速。除了适用于客户端浏览器编程，如今JavaScript程序可以运行于越来越多的平台之上。你可以用它来进行服务器端开发（使用.Net或Node.js）、桌面应用程序开发（运行于桌面操作系统）、以及应用程序扩展（Firefox插件或者Photoshop扩展）、移动终端应用和纯命令行的批处理脚本。</p>\n<p>JavaScript同样是一门不寻常的语言。它没有类，许多场景中它使用函数作为一等对象。起初，许多开发者认为这门语言存在很多缺陷，但最近几年情况发生了微妙的变化。有意思的是，有一些老牌语言比如Java和PHP也已经开始添加诸如闭包和匿名函数等新特性，而闭包和匿名函数则是JavaScript程序员最愿意津津乐道的话题。</p>\n<p>JavaScript十分灵活，可以用你所熟悉的其他任何编程语言的编程风格来写JavaScript程序。但最好的方式还是拥抱它所带来的变化、学习它所特有的编程模式。</p>\n<h2 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h2><p>对 “模式”的广义解释是“反复发生的事件或对象的固定用法…可以用来作为重复使用的模板或模型”（<a href=\"http://en.wikipedia.org/wiki/Pattern）。\">http://en.wikipedia.org/wiki/Pattern）。</a></p>\n<p>在软件开发领域，模式是指常见问题的通用解决方案。模式不是简单的代码复制和粘贴，而是一种最佳实践，一种高级抽象，是解决某一类问题的范本。</p>\n<p>识别这些模式非常重要，因为：</p>\n<ul>\n<li>这些模式提供了经过论证的最佳实践，它可以帮助我们更好的编码，避免重复制造车轮。</li>\n<li>这些模式提供了高一层的抽象，某个时间段内大脑只能处理一定复杂度的逻辑，因此当你处理更繁琐棘手的问题时，它会帮你理清头绪，你才不会被低级的琐事阻碍大脑思考，因为所有的细枝末节都可以被归类和切分成不同的块（模式）。</li>\n<li>这些模式为开发者和团队提供了沟通的渠道，团队开发者之间往往是异地协作，不会有经常面对面的沟通机会。简单的代码编写技巧和技术问题处理方式的约定（代码注释）使得开发者之间的交流更加通畅。例如，“函数立即执行”用大白话表述成“你写好一个函数后，在函数的结束花括号的后面添加一对括号，这样能在定义函数结束后马上执行这个函数”（我的天）。</li>\n</ul>\n<p>本书将着重讨论下面这三种模式：</p>\n<ul>\n<li>设计模式（Design patterns）</li>\n<li>编码模式（Coding patterns）</li>\n<li>反模式（Antipatterns）</li>\n</ul>\n<p>设计模式最初的定义是来自于“GoF”（四人组，94年版“设计模式”的四个作者）的一本书，这本书在1994年出版，书名全称是“设计模式：可复用面向对象软件基础”。书中列举了一些重要的设计模式，比如单体、工厂、装饰者、观察者等等。但适用于JavaScript的设计模式并不多，尽管设计模式是脱离某种语言而存在的，但通常会以某种语言做范例来讲解设计模式，这些语言多是强类型语言，比如C++和Java。有时直接将其应用于弱类型的动态语言比如JavaScript又显得捉襟见肘。通常这些设计模式都是基于语言的强类型特性以及类的继承。而JavaScript则需要某种轻型的替代方案。本书在第七章将讨论基于 JavaScript实现的一些设计模式。</p>\n<p>编码模式更有趣一些。它们是JavaScript特有的模式和最佳实践，它利用了这门语言独有的一些特性，比如对函数的灵活运用，JavaScript编码模式是本书所要讨论的重点内容。</p>\n<p>本书中你会偶尔读到一点关于“反模式”的内容，顾名思义，反模式具有某些负作用甚至破坏性，书中会顺便一提。反模式并不是bug或代码错误，它只是一种处理问题的对策，只是这种对策带来的麻烦远超过他们解决的问题。在示例代码中我们会对反模式做明显的标注。</p>\n"},{"title":"直接量和构造函数","date":"2017-01-19T16:00:00.000Z","_content":"\n\n<a name=\"a1\"></a>\n# 第三章 直接量和构造函数\n\nJavaScript中的直接量模式更加简洁、富有表现力，且在定义对象时不容易出错。本章将对直接量展开讨论，包括对象、数组和正则表达式直接量，以及为什么要优先使用它们而不是如`Object()`和`Array()`这些等价的内置构造器函数。本章同样会介绍JSON格式，JSON是使用数组和对象直接量的形式定义的一种数据转换格式。本章还会讨论自定义构造函数，包括如何强制使用new以确保构造函数的正确执行。\n\n本章还会补充讲述一些基础知识，比如内置包装对象Number()、String()和Boolean()，以及如何将它们和原始值（数字、字符串和布尔值）比较。最后，快速介绍一下Error()构造函数的用法。\n\n<a name=\"a2\"></a>\n## 对象直接量\n\n我们可以将JavaScript中的对象简单的理解为名值对组成的散列表（hash table），在其他编程语言中被称作“关联数组”。其中的值可以是原始值也可以是对象，不管是什么类型，它们都是“属性”（properties），属性值同样可以是函数，这时属性就被称为“方法”（methods）。\n\nJavaScript中自定义的对象（用户定义的本地对象）任何时候都是可变的。内置本地对象的属性也是可变的。你可以先创建一个空对象，然后在需要时给它添加功能。“对象直接量写法（object literal notation）”是按需创建对象的一种理想方式。\n\n看一下这个例子：\n\n\t// start with an empty object\n\tvar dog = {};\n\n\t// add one property\n\tdog.name = \"Benji\";\n\n\t// now add a method\n\tdog.getName = function () {\n\t\treturn dog.name;\n\t};\n\n在这个例子中，我们首先定义了一个空对象，然后添加了一个属性和一个方法，在程序的生命周期内的任何时刻都可以：\n\n1.更改属性和方法的值，比如：\n\n\tdog.getName = function () {\n\t\t// redefine the method to return\n\t\t// a hardcoded value\n\t\treturn \"Fido\";\n\t};\n\n2.完全删除属性/方法\n\n\tdelete dog.name;\n\n3.添加更多的属性和方法\n\n\tdog.say = function () {\n\t\treturn \"Woof!\";\n\t};\n\tdog.fleas = true;\n\n其实不必每次开始都创建空对象，对象直接量模式可以直接在创建对象时添加功能，就像下面这个例子所展示的：\n\n\tvar dog = {\n\t\tname: \"Benji\",\n\t\tgetName: function () {\n\t\t\treturn this.name;\n\t\t}\n\t};\n\n> 在本书中多次提到“空对象”（“blank object”和“empty object”）。这只是某种简称，要知道JavaScript中根本不存在真正的空对象，理解这一点至关重要。即使最简单的`{}`对象包含从Object.prototype继承来的属性和方法。我们提到的“空（empty）对象”只是说这个对象没有自己的属性，不考虑它是否有继承来的属性。\n\n","source":"_posts/javascript-patterns3.md","raw":"---\ntitle: 直接量和构造函数\ndate: 2017-1-20\ntags:\n - javascript\n - patterns\ncategories:\n - javascript\n---\n\n\n<a name=\"a1\"></a>\n# 第三章 直接量和构造函数\n\nJavaScript中的直接量模式更加简洁、富有表现力，且在定义对象时不容易出错。本章将对直接量展开讨论，包括对象、数组和正则表达式直接量，以及为什么要优先使用它们而不是如`Object()`和`Array()`这些等价的内置构造器函数。本章同样会介绍JSON格式，JSON是使用数组和对象直接量的形式定义的一种数据转换格式。本章还会讨论自定义构造函数，包括如何强制使用new以确保构造函数的正确执行。\n\n本章还会补充讲述一些基础知识，比如内置包装对象Number()、String()和Boolean()，以及如何将它们和原始值（数字、字符串和布尔值）比较。最后，快速介绍一下Error()构造函数的用法。\n\n<a name=\"a2\"></a>\n## 对象直接量\n\n我们可以将JavaScript中的对象简单的理解为名值对组成的散列表（hash table），在其他编程语言中被称作“关联数组”。其中的值可以是原始值也可以是对象，不管是什么类型，它们都是“属性”（properties），属性值同样可以是函数，这时属性就被称为“方法”（methods）。\n\nJavaScript中自定义的对象（用户定义的本地对象）任何时候都是可变的。内置本地对象的属性也是可变的。你可以先创建一个空对象，然后在需要时给它添加功能。“对象直接量写法（object literal notation）”是按需创建对象的一种理想方式。\n\n看一下这个例子：\n\n\t// start with an empty object\n\tvar dog = {};\n\n\t// add one property\n\tdog.name = \"Benji\";\n\n\t// now add a method\n\tdog.getName = function () {\n\t\treturn dog.name;\n\t};\n\n在这个例子中，我们首先定义了一个空对象，然后添加了一个属性和一个方法，在程序的生命周期内的任何时刻都可以：\n\n1.更改属性和方法的值，比如：\n\n\tdog.getName = function () {\n\t\t// redefine the method to return\n\t\t// a hardcoded value\n\t\treturn \"Fido\";\n\t};\n\n2.完全删除属性/方法\n\n\tdelete dog.name;\n\n3.添加更多的属性和方法\n\n\tdog.say = function () {\n\t\treturn \"Woof!\";\n\t};\n\tdog.fleas = true;\n\n其实不必每次开始都创建空对象，对象直接量模式可以直接在创建对象时添加功能，就像下面这个例子所展示的：\n\n\tvar dog = {\n\t\tname: \"Benji\",\n\t\tgetName: function () {\n\t\t\treturn this.name;\n\t\t}\n\t};\n\n> 在本书中多次提到“空对象”（“blank object”和“empty object”）。这只是某种简称，要知道JavaScript中根本不存在真正的空对象，理解这一点至关重要。即使最简单的`{}`对象包含从Object.prototype继承来的属性和方法。我们提到的“空（empty）对象”只是说这个对象没有自己的属性，不考虑它是否有继承来的属性。\n\n","slug":"javascript-patterns3","published":1,"updated":"2017-02-07T09:46:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyvd30ih0005heio65st132u","content":"<p><a name=\"a1\"></a></p>\n<h1 id=\"第三章-直接量和构造函数\"><a href=\"#第三章-直接量和构造函数\" class=\"headerlink\" title=\"第三章 直接量和构造函数\"></a>第三章 直接量和构造函数</h1><p>JavaScript中的直接量模式更加简洁、富有表现力，且在定义对象时不容易出错。本章将对直接量展开讨论，包括对象、数组和正则表达式直接量，以及为什么要优先使用它们而不是如<code>Object()</code>和<code>Array()</code>这些等价的内置构造器函数。本章同样会介绍JSON格式，JSON是使用数组和对象直接量的形式定义的一种数据转换格式。本章还会讨论自定义构造函数，包括如何强制使用new以确保构造函数的正确执行。</p>\n<p>本章还会补充讲述一些基础知识，比如内置包装对象Number()、String()和Boolean()，以及如何将它们和原始值（数字、字符串和布尔值）比较。最后，快速介绍一下Error()构造函数的用法。</p>\n<p><a name=\"a2\"></a></p>\n<h2 id=\"对象直接量\"><a href=\"#对象直接量\" class=\"headerlink\" title=\"对象直接量\"></a>对象直接量</h2><p>我们可以将JavaScript中的对象简单的理解为名值对组成的散列表（hash table），在其他编程语言中被称作“关联数组”。其中的值可以是原始值也可以是对象，不管是什么类型，它们都是“属性”（properties），属性值同样可以是函数，这时属性就被称为“方法”（methods）。</p>\n<p>JavaScript中自定义的对象（用户定义的本地对象）任何时候都是可变的。内置本地对象的属性也是可变的。你可以先创建一个空对象，然后在需要时给它添加功能。“对象直接量写法（object literal notation）”是按需创建对象的一种理想方式。</p>\n<p>看一下这个例子：</p>\n<pre><code>// start with an empty object\nvar dog = {};\n\n// add one property\ndog.name = &quot;Benji&quot;;\n\n// now add a method\ndog.getName = function () {\n    return dog.name;\n};\n</code></pre><p>在这个例子中，我们首先定义了一个空对象，然后添加了一个属性和一个方法，在程序的生命周期内的任何时刻都可以：</p>\n<p>1.更改属性和方法的值，比如：</p>\n<pre><code>dog.getName = function () {\n    // redefine the method to return\n    // a hardcoded value\n    return &quot;Fido&quot;;\n};\n</code></pre><p>2.完全删除属性/方法</p>\n<pre><code>delete dog.name;\n</code></pre><p>3.添加更多的属性和方法</p>\n<pre><code>dog.say = function () {\n    return &quot;Woof!&quot;;\n};\ndog.fleas = true;\n</code></pre><p>其实不必每次开始都创建空对象，对象直接量模式可以直接在创建对象时添加功能，就像下面这个例子所展示的：</p>\n<pre><code>var dog = {\n    name: &quot;Benji&quot;,\n    getName: function () {\n        return this.name;\n    }\n};\n</code></pre><blockquote>\n<p>在本书中多次提到“空对象”（“blank object”和“empty object”）。这只是某种简称，要知道JavaScript中根本不存在真正的空对象，理解这一点至关重要。即使最简单的<code>{}</code>对象包含从Object.prototype继承来的属性和方法。我们提到的“空（empty）对象”只是说这个对象没有自己的属性，不考虑它是否有继承来的属性。</p>\n</blockquote>\n","excerpt":"","more":"<p><a name=\"a1\"></a></p>\n<h1 id=\"第三章-直接量和构造函数\"><a href=\"#第三章-直接量和构造函数\" class=\"headerlink\" title=\"第三章 直接量和构造函数\"></a>第三章 直接量和构造函数</h1><p>JavaScript中的直接量模式更加简洁、富有表现力，且在定义对象时不容易出错。本章将对直接量展开讨论，包括对象、数组和正则表达式直接量，以及为什么要优先使用它们而不是如<code>Object()</code>和<code>Array()</code>这些等价的内置构造器函数。本章同样会介绍JSON格式，JSON是使用数组和对象直接量的形式定义的一种数据转换格式。本章还会讨论自定义构造函数，包括如何强制使用new以确保构造函数的正确执行。</p>\n<p>本章还会补充讲述一些基础知识，比如内置包装对象Number()、String()和Boolean()，以及如何将它们和原始值（数字、字符串和布尔值）比较。最后，快速介绍一下Error()构造函数的用法。</p>\n<p><a name=\"a2\"></a></p>\n<h2 id=\"对象直接量\"><a href=\"#对象直接量\" class=\"headerlink\" title=\"对象直接量\"></a>对象直接量</h2><p>我们可以将JavaScript中的对象简单的理解为名值对组成的散列表（hash table），在其他编程语言中被称作“关联数组”。其中的值可以是原始值也可以是对象，不管是什么类型，它们都是“属性”（properties），属性值同样可以是函数，这时属性就被称为“方法”（methods）。</p>\n<p>JavaScript中自定义的对象（用户定义的本地对象）任何时候都是可变的。内置本地对象的属性也是可变的。你可以先创建一个空对象，然后在需要时给它添加功能。“对象直接量写法（object literal notation）”是按需创建对象的一种理想方式。</p>\n<p>看一下这个例子：</p>\n<pre><code>// start with an empty object\nvar dog = {};\n\n// add one property\ndog.name = &quot;Benji&quot;;\n\n// now add a method\ndog.getName = function () {\n    return dog.name;\n};\n</code></pre><p>在这个例子中，我们首先定义了一个空对象，然后添加了一个属性和一个方法，在程序的生命周期内的任何时刻都可以：</p>\n<p>1.更改属性和方法的值，比如：</p>\n<pre><code>dog.getName = function () {\n    // redefine the method to return\n    // a hardcoded value\n    return &quot;Fido&quot;;\n};\n</code></pre><p>2.完全删除属性/方法</p>\n<pre><code>delete dog.name;\n</code></pre><p>3.添加更多的属性和方法</p>\n<pre><code>dog.say = function () {\n    return &quot;Woof!&quot;;\n};\ndog.fleas = true;\n</code></pre><p>其实不必每次开始都创建空对象，对象直接量模式可以直接在创建对象时添加功能，就像下面这个例子所展示的：</p>\n<pre><code>var dog = {\n    name: &quot;Benji&quot;,\n    getName: function () {\n        return this.name;\n    }\n};\n</code></pre><blockquote>\n<p>在本书中多次提到“空对象”（“blank object”和“empty object”）。这只是某种简称，要知道JavaScript中根本不存在真正的空对象，理解这一点至关重要。即使最简单的<code>{}</code>对象包含从Object.prototype继承来的属性和方法。我们提到的“空（empty）对象”只是说这个对象没有自己的属性，不考虑它是否有继承来的属性。</p>\n</blockquote>\n"},{"title":"React Native配置和起步","date":"2015-01-19T16:00:00.000Z","_content":"\n\n\nReact Native: 配置和起步\n23 Sep 2015\n\n[React Native: 配置和起步](https://www.liaohuqiu.net/cn/posts/react-native-1/)\n2015 年 9 月 15 号，React Native for Android 发布。至此，React 基本完成了对多端的支持。基于 React / React Native 可以：\n\n<a href=\"https://www.liaohuqiu.net/cn/posts/react-native-1/\">H5, Android, iOS 多端代码复用</a>\n\n实时热部署\n\n在接下来的时间，我会通过一系列文章来介绍 React Native。本文介绍环境配置以及如何建立一个简单的项目。本篇文章 iOS 和 Android 开发都适用。\n\n目前使用 React Native 开发只能在 Mac 系统 上进行。写 iOS 的同学，应该都是 Mac （除了听说网易有些部门写 iOS 给黑苹果之外，哈哈哈哈）。 开发 Android 的同学, 如果公司配发的不是 Mac 的话，建议自己入手一个，能显著提高生产力，就当投资自己吧。我大阿里对 Android 开发也是不给 Mac 的（不知道公司什么思路，现在倒是可以申请 Mac air了，air的性能……），所以我也是自己买的。","source":"_posts/React Native配置和起步.md","raw":"---\ntitle: React Native配置和起步\ndate: 2015-1-20\ntags:\n - javascript\n - React\n - React Native\n - 转载\ncategories:\n - app\n---\n\n\n\nReact Native: 配置和起步\n23 Sep 2015\n\n[React Native: 配置和起步](https://www.liaohuqiu.net/cn/posts/react-native-1/)\n2015 年 9 月 15 号，React Native for Android 发布。至此，React 基本完成了对多端的支持。基于 React / React Native 可以：\n\n<a href=\"https://www.liaohuqiu.net/cn/posts/react-native-1/\">H5, Android, iOS 多端代码复用</a>\n\n实时热部署\n\n在接下来的时间，我会通过一系列文章来介绍 React Native。本文介绍环境配置以及如何建立一个简单的项目。本篇文章 iOS 和 Android 开发都适用。\n\n目前使用 React Native 开发只能在 Mac 系统 上进行。写 iOS 的同学，应该都是 Mac （除了听说网易有些部门写 iOS 给黑苹果之外，哈哈哈哈）。 开发 Android 的同学, 如果公司配发的不是 Mac 的话，建议自己入手一个，能显著提高生产力，就当投资自己吧。我大阿里对 Android 开发也是不给 Mac 的（不知道公司什么思路，现在倒是可以申请 Mac air了，air的性能……），所以我也是自己买的。","slug":"React Native配置和起步","published":1,"updated":"2017-02-08T08:24:27.000Z","_id":"ciywovuox0000mqiolbvoive1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>React Native: 配置和起步<br>23 Sep 2015</p>\n<p><a href=\"https://www.liaohuqiu.net/cn/posts/react-native-1/\" target=\"_blank\" rel=\"external\">React Native: 配置和起步</a><br>2015 年 9 月 15 号，React Native for Android 发布。至此，React 基本完成了对多端的支持。基于 React / React Native 可以：</p>\n<p><a href=\"https://www.liaohuqiu.net/cn/posts/react-native-1/\" target=\"_blank\" rel=\"external\">H5, Android, iOS 多端代码复用</a></p>\n<p>实时热部署</p>\n<p>在接下来的时间，我会通过一系列文章来介绍 React Native。本文介绍环境配置以及如何建立一个简单的项目。本篇文章 iOS 和 Android 开发都适用。</p>\n<p>目前使用 React Native 开发只能在 Mac 系统 上进行。写 iOS 的同学，应该都是 Mac （除了听说网易有些部门写 iOS 给黑苹果之外，哈哈哈哈）。 开发 Android 的同学, 如果公司配发的不是 Mac 的话，建议自己入手一个，能显著提高生产力，就当投资自己吧。我大阿里对 Android 开发也是不给 Mac 的（不知道公司什么思路，现在倒是可以申请 Mac air了，air的性能……），所以我也是自己买的。</p>\n","excerpt":"","more":"<p>React Native: 配置和起步<br>23 Sep 2015</p>\n<p><a href=\"https://www.liaohuqiu.net/cn/posts/react-native-1/\">React Native: 配置和起步</a><br>2015 年 9 月 15 号，React Native for Android 发布。至此，React 基本完成了对多端的支持。基于 React / React Native 可以：</p>\n<p><a href=\"https://www.liaohuqiu.net/cn/posts/react-native-1/\">H5, Android, iOS 多端代码复用</a></p>\n<p>实时热部署</p>\n<p>在接下来的时间，我会通过一系列文章来介绍 React Native。本文介绍环境配置以及如何建立一个简单的项目。本篇文章 iOS 和 Android 开发都适用。</p>\n<p>目前使用 React Native 开发只能在 Mac 系统 上进行。写 iOS 的同学，应该都是 Mac （除了听说网易有些部门写 iOS 给黑苹果之外，哈哈哈哈）。 开发 Android 的同学, 如果公司配发的不是 Mac 的话，建议自己入手一个，能显著提高生产力，就当投资自己吧。我大阿里对 Android 开发也是不给 Mac 的（不知道公司什么思路，现在倒是可以申请 Mac air了，air的性能……），所以我也是自己买的。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciyvd30i50000heiomn8duuf0","category_id":"ciyvd30id0003heio2l58h6pv","_id":"ciyvd30im0008heioqesjv576"},{"post_id":"ciyvd30ib0002heiogb9kxx6k","category_id":"ciyvd30id0003heio2l58h6pv","_id":"ciyvd30in000cheio3oy82lk8"},{"post_id":"ciyvd30ih0005heio65st132u","category_id":"ciyvd30id0003heio2l58h6pv","_id":"ciyvd30io000fheioiufld3vx"},{"post_id":"ciywovuox0000mqiolbvoive1","category_id":"ciywovup20001mqio0n183jpr","_id":"ciywovup40004mqior2jgcwes"}],"PostTag":[{"post_id":"ciyvd30i50000heiomn8duuf0","tag_id":"ciyvd30ig0004heiobnciry1s","_id":"ciyvd30in000bheio02vruhtg"},{"post_id":"ciyvd30i50000heiomn8duuf0","tag_id":"ciyvd30ik0007heiophawzx0p","_id":"ciyvd30in000dheio09tg5hpc"},{"post_id":"ciyvd30ib0002heiogb9kxx6k","tag_id":"ciyvd30ig0004heiobnciry1s","_id":"ciyvd30io000hheiojeet0608"},{"post_id":"ciyvd30ib0002heiogb9kxx6k","tag_id":"ciyvd30ik0007heiophawzx0p","_id":"ciyvd30io000iheioec5nlnqb"},{"post_id":"ciyvd30ih0005heio65st132u","tag_id":"ciyvd30ig0004heiobnciry1s","_id":"ciyvd30ip000kheiosnxxdiay"},{"post_id":"ciyvd30ih0005heio65st132u","tag_id":"ciyvd30ik0007heiophawzx0p","_id":"ciyvd30ip000lheioot2scohw"},{"post_id":"ciywovuox0000mqiolbvoive1","tag_id":"ciyvd30ig0004heiobnciry1s","_id":"ciywovup40006mqioua4t13cp"},{"post_id":"ciywovuox0000mqiolbvoive1","tag_id":"ciywovup20002mqiogbh66r90","_id":"ciywovup50007mqioj013wyei"},{"post_id":"ciywovuox0000mqiolbvoive1","tag_id":"ciywovup30003mqio53ypx8c2","_id":"ciywovup50008mqioi5aojtak"},{"post_id":"ciywovuox0000mqiolbvoive1","tag_id":"ciywovup40005mqio4vohunu9","_id":"ciywovup50009mqioz1cf2t03"}],"Tag":[{"name":"javascript","_id":"ciyvd30ig0004heiobnciry1s"},{"name":"patterns","_id":"ciyvd30ik0007heiophawzx0p"},{"name":"React","_id":"ciywovup20002mqiogbh66r90"},{"name":"React Native","_id":"ciywovup30003mqio53ypx8c2"},{"name":"转载","_id":"ciywovup40005mqio4vohunu9"}]}}